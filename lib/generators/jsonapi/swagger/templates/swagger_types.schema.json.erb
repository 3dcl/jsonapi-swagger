{

  "type": "object",  
  "properties": {
    "id": { "type": "string", "description": "ID"},
    "type": { "type":  "string", "enum": ["<%=resource_type_name %>"]},
    "links": {
      "type": "object",
      "properties": {
        "self": { "type": "string", "description": "<%= t(:detail_link) %>"}
      },
      "description": "<%= t(:detail_link) %>"
    },
    "attributes": {
      "type": "object",
      "properties":
        <%= JSON.pretty_generate(attributes.keys.map do |attr|

          fields = [["type", columns_with_comment[attr][:type]]]
          if columns_with_comment[attr][:format].present?
            fields << ["format", columns_with_comment[attr][:format]]
          end

          if columns_with_comment[attr][:properties].present?
            fields << ["properties", columns_with_comment[attr][:properties]]
          end

          if columns_with_comment[attr][:enum].present?
            fields << ["enum", columns_with_comment[attr][:enum]]
          end

          if columns_with_comment[attr][:is_array]
            type = columns_with_comment[attr][:items_type]
            item_fields =[];

            item_fields = [["type", type]]
            
            if(type == :object)

              items_properties = columns_with_comment[attr][:items_properties]
              if(items_properties)
                item_fields << ["properties", items_properties]
              end
            end

            if columns_with_comment[attr][:items_enum]
              item_fields << ["enum", columns_with_comment[attr][:items_enum]]
            end

            fields << ["items", item_fields.to_h]
          end
          fields << ['x-nullable', columns_with_comment[attr][:nullable]]
          if(columns_with_comment[attr][:comment].present? || columns_with_comment[attr][:description].present?)
            text = columns_with_comment[attr][:comment].presence || columns_with_comment[attr][:description]
            fields << ["description",  text]
          end

          [attr, fields.to_h]
        end.to_h) %>
      ,
      "description": "<%= t(:attributes) %>"
    },
    "relationships": {
      "type": "object",
      "properties":        
<%= JSON.pretty_generate(relationships.map do |relation_name, relation|
puts relation.class
  relation_name_camelize = relation_name.to_s.camelize
  relationship_data_value = if relation.is_a?(JSONAPI::Relationship)
    # Jsonapi resource
    relation.is_a?(JSONAPI::Relationship::ToOne) ? {"$ref": "#/components/schemas/jsonapi_to_one_relationship_data"   } : {"$ref": "#/components/schemas/jsonapi_to_many_relationship_data"   }
  else
    {"$ref": "#/components/schemas/jsonapi_to_many_relationship_data"   }
  end
  [relation_name, {type: :object, properties: {data: relationship_data_value}}]
end.to_h) -%>,
      "description": "<%= t(:associate_data) %>"
    }
}

}


